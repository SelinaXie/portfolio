//
// Compat with Navi 0.10
//
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
import { compose } from '../utils/compose';
import { withView } from './withView';
import { map } from './map';
import { mount } from './mount';
import { redirect } from './redirect';
import { withContext } from './withContext';
import { extractDefault } from '../Resolvable';
import { withData } from './withData';
import { withTitle } from './withTitle';
function createGetPage(options) {
    return function getPage(req, context) {
        return __awaiter(this, void 0, void 0, function () {
            var metaPromise, titlePromise, contentPromise, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        metaPromise = options.getMeta
                            ? Promise.resolve(options.getMeta(req, context, undefined))
                                .then(extractDefault)
                                .then(inputOrEmptyObject)
                            : Promise.resolve(options.meta || {});
                        titlePromise = options.getTitle
                            ? Promise.resolve(options.getTitle(req, context, metaPromise)).then(extractDefault)
                            : Promise.resolve(options.title);
                        if (req.method !== 'HEAD') {
                            contentPromise = options.getContent
                                ? Promise.resolve(options.getContent(req, context, metaPromise)).then(extractDefault)
                                : Promise.resolve(options.content);
                        }
                        _a = {};
                        return [4 /*yield*/, metaPromise];
                    case 1:
                        _a.meta = _b.sent();
                        return [4 /*yield*/, contentPromise];
                    case 2:
                        _a.content = _b.sent();
                        return [4 /*yield*/, titlePromise];
                    case 3: return [2 /*return*/, (_a.title = _b.sent(),
                            _a)];
                }
            });
        });
    };
}
export function createPage(options) {
    if (process.env.NODE_ENV !== 'production') {
        console.warn("Deprecation Warning: \"createPage()\" is deprecated. From Navi 0.13, " +
            "you'll need to use the \"route()\" matcher instead.");
    }
    return Object.assign(compose(withContext(createGetPage(options)), withData(function (req, context) { return context.meta; }), withTitle(function (req, context) { return context.title; }), withView(function (req, context) { return context.content; })), { isDeprecatedMatcher: true });
}
function inputOrEmptyObject(x) {
    return x || {};
}
export function createContext(maybeChildContextResolvable, maybeChildNodeResolvable) {
    if (process.env.NODE_ENV !== 'production') {
        console.warn("Deprecation Warning: \"createContext()\" is deprecated. From Navi 0.13, " +
            "you'll need to use the \"withContext()\" matcher instead.");
    }
    return Object.assign(withContext(maybeChildContextResolvable, maybeChildNodeResolvable.isDeprecatedMatcher
        ? maybeChildNodeResolvable
        : map(maybeChildNodeResolvable)), { isDeprecatedMatcher: true });
}
export function createSwitch(options) {
    var e_1, _a;
    if (process.env.NODE_ENV !== 'production') {
        console.warn("Deprecation Warning: \"createSwitch()\" is deprecated. From Navi 0.13, " +
            "you'll need to use the \"map()\" matcher instead.");
    }
    var mappedPaths = {};
    try {
        for (var _b = __values(Object.keys(options.paths)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var matcher = options.paths[key];
            mappedPaths[key] = matcher.isDeprecatedMatcher ? matcher : map(matcher);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (Object.keys(options).length === 1) {
        return Object.assign(mount(mappedPaths), { isDeprecatedMatcher: true });
    }
    else {
        var paths = options.paths, pageOptions = __rest(options, ["paths"]);
        return Object.assign(compose(withContext(createGetPage(pageOptions)), withData(function (req, context) { return context.meta; }), withTitle(function (req, context) { return context.title; }), withView(function (req, context) { return context.content; }), mount(mappedPaths)), { isDeprecatedMatcher: true });
    }
}
export function createRedirect(to, meta) {
    if (process.env.NODE_ENV !== 'production') {
        console.warn("Deprecation Warning: \"createRedirect()\" is deprecated. From Navi 0.13, " +
            "you'll need to use the \"redirect()\" matcher instead.");
    }
    var matcher = redirect(to);
    if (meta) {
        return compose(withData(meta), matcher);
    }
    return Object.assign(matcher, { isDeprecatedMatcher: true });
}
//# sourceMappingURL=compat.js.map