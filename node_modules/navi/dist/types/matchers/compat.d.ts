import { Matcher, ResolvableMatcher } from '../Matcher';
import { Resolvable } from '../Resolvable';
import { URLDescriptor } from '../URLTools';
interface PageOptions<Context extends object, Meta extends object, Content> {
    title?: string;
    getTitle?: Resolvable<string, Context, Promise<Meta>>;
    meta?: Meta;
    getMeta?: Resolvable<Meta, Context>;
    content?: Content;
    getContent?: Resolvable<Content, Context, Promise<Meta>>;
}
export declare function createPage<Context extends object, Meta extends object, View>(options: PageOptions<Context, Meta, View>): Matcher<Context>;
export declare type MaybeResolvableMatcher<Context extends object = any> = Matcher<Context> | ResolvableMatcher<Context>;
export declare function createContext<ParentContext extends object = any, ChildContext extends object = any>(maybeChildContextResolvable: Resolvable<ChildContext, ParentContext>, maybeChildNodeResolvable: MaybeResolvableMatcher<ChildContext>): Matcher<ParentContext, ChildContext>;
interface SwitchOptions<Context extends object, Meta extends object, Content> extends PageOptions<Context, Meta, Content> {
    paths: {
        [pattern: string]: MaybeResolvableMatcher;
    };
}
export declare function createSwitch<Context extends object, Meta extends object, Content>(options: SwitchOptions<Context, Meta, Content>): Matcher<Context>;
export declare function createRedirect<Context extends object = any, Meta extends object = any>(to: string | Partial<URLDescriptor> | Resolvable<Partial<URLDescriptor> | string>, meta?: Meta | Resolvable<Meta>): Matcher<Context>;
export {};
