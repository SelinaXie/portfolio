"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_helmet_1 = require("react-helmet");
var navi_1 = require("navi");
var NaviContext_1 = require("./NaviContext");
var scrollToHash_1 = require("./scrollToHash");
exports.View = function View(props) {
    return (React.createElement(NaviContext_1.NaviContext.Consumer, null, function (context) { return React.createElement(InnerView, __assign({}, props, { context: context })); }));
};
exports.View.defaultProps = {
    hashScrollBehavior: 'smooth',
    where: function (Chunk) { return Chunk.type === 'view'; }
};
// Memoize these to stop a bizarre react-helmet infinite loop bug when titles
// are recreated on each render
var titles = {};
function createTitleElement(str) {
    var title = titles[str];
    if (!title) {
        title = titles[str] = React.createElement("title", null, str);
    }
    return title;
}
var InnerView = /** @class */ (function (_super) {
    __extends(InnerView, _super);
    function InnerView(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {};
        return _this;
    }
    InnerView.getDerivedStateFromProps = function (props, state) {
        var route = props.context.steadyRoute || props.context.busyRoute;
        // If there's no steady route, then we'll need to wait until a steady
        // route becomes available.
        if (!route) {
            return null;
        }
        // Bail if nothing has changed
        if (state.route === route &&
            state.childContext && state.childContext.busyRoute === props.context.busyRoute) {
            return null;
        }
        var unconsumedChunks = props.context.unconsumedSteadyRouteChunks ||
            route.chunks;
        var index = unconsumedChunks.findIndex(props.where);
        var errorSearchChunks = index === -1 ? unconsumedChunks : unconsumedChunks.slice(0, index + 1);
        var errorChunk = errorSearchChunks.find(function (Chunk) { return Chunk.type === 'error'; });
        if (errorChunk) {
            return {
                error: errorChunk.error || new Error("Unknown routing error")
            };
        }
        if (index === -1) {
            return null;
        }
        var Chunk = unconsumedChunks[index];
        // Find any unconsumed head content that comes before and after this
        // Chunk.
        var headAndTitleChunks = unconsumedChunks
            .slice(0, index)
            .filter(function (Chunk) { return Chunk.type === 'title' || Chunk.type === 'head'; });
        for (index += 1; index < unconsumedChunks.length; index++) {
            var Chunk_1 = unconsumedChunks[index];
            if (Chunk_1.type === 'busy' || Chunk_1.type === 'error' || props.where(Chunk_1)) {
                break;
            }
            if (Chunk_1.type === 'title' || Chunk_1.type === 'head') {
                headAndTitleChunks.push(Chunk_1);
            }
        }
        return {
            Chunk: Chunk,
            headAndTitleChunks: headAndTitleChunks,
            route: route,
            childContext: __assign({}, props.context, { busyRoute: props.context.busyRoute, unconsumedSteadyRouteChunks: unconsumedChunks.slice(index) }),
        };
    };
    InnerView.prototype.componentDidUpdate = function (prevProps, prevState) {
        this.handleUpdate(prevState);
    };
    InnerView.prototype.componentDidMount = function () {
        this.handleUpdate();
    };
    InnerView.prototype.handleUpdate = function (prevState) {
        if (this.state.route && (!prevState || !prevState.route || prevState.route !== this.state.route)) {
            var prevRoute = prevState && prevState.route;
            var nextRoute = this.state.route;
            if (nextRoute && nextRoute.type !== 'busy') {
                if (prevRoute &&
                    nextRoute.url.pathname === prevRoute.url.pathname &&
                    nextRoute.url.search === prevRoute.url.search &&
                    nextRoute.url.hash === prevRoute.url.hash) {
                    return;
                }
                if (!this.props.disableScrolling &&
                    (!prevRoute ||
                        !prevRoute.url ||
                        prevRoute.url.hash !== nextRoute.url.hash ||
                        prevRoute.url.pathname !== nextRoute.url.pathname)) {
                    scrollToHash_1.scrollToHash(nextRoute.url.hash, prevRoute && prevRoute.url && prevRoute.url.pathname === nextRoute.url.pathname
                        ? this.props.hashScrollBehavior
                        : 'auto');
                }
            }
        }
    };
    InnerView.prototype.render = function () {
        if (this.state.error) {
            throw this.state.error;
        }
        var _a = this.state, Chunk = _a.Chunk, headAndTitleChunks = _a.headAndTitleChunks;
        if (!Chunk || !Chunk.view) {
            var Suspense = React.Suspense;
            if (Suspense) {
                throw this.props.context.navigation.getRoute();
            }
            else {
                console.warn("A Navi <View> component was rendered before your Navigation store's state had become steady. Consider waiting before rendering with \"await navigation.getRoute()\", or upgrading React to version 16.6 to handle this with Suspense.");
                return null;
            }
        }
        var helmet = headAndTitleChunks &&
            headAndTitleChunks.length && React.createElement.apply(React, [react_helmet_1.Helmet,
            null].concat(headAndTitleChunks.map(function (Chunk) {
            return Chunk.type === 'title' ? (createTitleElement(Chunk.title)) : ((Chunk.head.type === React.Fragment || Chunk.head.type === 'head')
                ? Chunk.head.props.children
                : Chunk.head);
        })));
        var content;
        var render;
        if (this.props.children) {
            render = this.props.children;
            if (typeof render !== "function") {
                throw new Error("A Navi <View> expects any children to be a function, but instead received \"" + render + "\".");
            }
            content = this.props.children(Chunk.view, this.state.route);
        }
        else if (Chunk.view) {
            if (typeof Chunk.view === 'function') {
                content = React.createElement(Chunk.view, { route: this.props.context.steadyRoute });
            }
            else if (typeof Chunk.view === 'string' || React.isValidElement(Chunk.view)) {
                content = Chunk.view;
            }
        }
        else {
            throw new Error("A Navi <View> was not able to find a `children` prop, and was unable to find any body or head content in the consumed Route Chunk's `content`.");
        }
        return (React.createElement(NaviContext_1.NaviContext.Provider, { value: this.state.childContext },
            helmet || null,
            // Clone the content to force a re-render even if content hasn't
            // changed, as Provider is a PureComponent.
            React.isValidElement(content)
                ? React.cloneElement(content)
                : content));
    };
    return InnerView;
}(React.Component));
var MissingChunk = /** @class */ (function (_super) {
    __extends(MissingChunk, _super);
    function MissingChunk(context) {
        var _this = _super.call(this, "A Navi <View> component attempted to use a Chunk that couldn't be found. This is likely due to its \"where\" prop.") || this;
        _this.context = context;
        return _this;
    }
    return MissingChunk;
}(navi_1.NaviError));
exports.MissingChunk = MissingChunk;
//# sourceMappingURL=View.js.map