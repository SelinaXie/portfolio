{"ast":null,"code":"import _regeneratorRuntime from \"/Users/selinaxie/Documents/AppLab/ss/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/selinaxie/Documents/AppLab/ss/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/selinaxie/Documents/AppLab/ss/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"/Users/selinaxie/Documents/AppLab/ss/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Navi from 'navi';\nimport { join } from 'path';\nimport { sortBy } from 'lodash';\nimport slugify from 'slugify'; // Get a list of all posts, that will not be loaded until the user\n// requests them.\n\nvar postModules = {\n  \"./2019-05-14-project/post.js\": function projectPostJs() {\n    return import(\"./2019-05-14-project/post.js\");\n  },\n  \"./2019-05-21-welcome/post.js\": function welcomePostJs() {\n    return import(\"./2019-05-21-welcome/post.js\");\n  }\n};\n\nvar importPost = function importPost(pathname) {\n  return postModules[pathname]();\n};\n\nvar postPathnames = Object.keys(postModules);\nvar datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/;\nvar postDetails = postPathnames.map(function (pathname) {\n  var slug = slugify(pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2')).replace(/^[-.]+|[.-]+$/g, '').replace(datePattern, '$1/');\n  var date;\n  var dateMatch = slug.match(datePattern);\n\n  if (dateMatch) {\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4]);\n  }\n\n  return {\n    slug: slug,\n    pathname: pathname,\n    date: date\n  };\n}); // Sort the pages by slug (which contain the dates)\n\npostDetails = sortBy(postDetails, ['slug']).reverse();\nvar posts = postDetails.map(function (_ref, i) {\n  var slug = _ref.slug,\n      pathname = _ref.pathname,\n      date = _ref.date;\n  return {\n    getPage: Navi.map(\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _ref3, post, title, getContent, meta, previousSlug, previousPost, nextSlug, nextPost, previousPostDetails, nextPostDetails;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return importPost(pathname);\n\n            case 2:\n              _ref3 = _context2.sent;\n              post = _ref3.default;\n              title = post.title, getContent = post.getContent, meta = _objectWithoutProperties(post, [\"title\", \"getContent\"]);\n\n              if (!(i !== 0)) {\n                _context2.next = 11;\n                break;\n              }\n\n              previousPostDetails = postDetails[i - 1];\n              _context2.next = 9;\n              return importPost(previousPostDetails.pathname);\n\n            case 9:\n              previousPost = _context2.sent.default;\n              previousSlug = previousPostDetails.slug;\n\n            case 11:\n              if (!(i + 1 < postDetails.length)) {\n                _context2.next = 17;\n                break;\n              }\n\n              nextPostDetails = postDetails[i + 1];\n              _context2.next = 15;\n              return importPost(nextPostDetails.pathname);\n\n            case 15:\n              nextPost = _context2.sent.default;\n              nextSlug = nextPostDetails.slug;\n\n            case 17:\n              return _context2.abrupt(\"return\", Navi.route({\n                title: title,\n                getData: function getData(req, context) {\n                  return _objectSpread({\n                    date: date,\n                    pathname: pathname,\n                    slug: slug,\n                    previousDetails: previousPost && {\n                      title: previousPost.title,\n                      href: join(context.blogRoot, 'posts', previousSlug)\n                    },\n                    nextDetails: nextPost && {\n                      title: nextPost.title,\n                      href: join(context.blogRoot, 'posts', nextSlug)\n                    }\n                  }, meta);\n                },\n                getView: function () {\n                  var _getView = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee() {\n                    var _ref4, MDXComponent, other;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return getContent();\n\n                          case 2:\n                            _ref4 = _context.sent;\n                            MDXComponent = _ref4.default;\n                            other = _objectWithoutProperties(_ref4, [\"default\"]);\n                            return _context.abrupt(\"return\", _objectSpread({\n                              MDXComponent: MDXComponent\n                            }, other));\n\n                          case 6:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  function getView() {\n                    return _getView.apply(this, arguments);\n                  }\n\n                  return getView;\n                }()\n              }));\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))),\n    slug: slug\n  };\n});\nexport default posts;","map":{"version":3,"sources":["/Users/selinaxie/Documents/AppLab/ss/portfolio/src/routes/posts/index.js"],"names":["Navi","join","sortBy","slugify","postModules","importPost","pathname","postPathnames","Object","keys","datePattern","postDetails","map","slug","replace","date","dateMatch","match","Date","parseInt","reverse","posts","i","getPage","post","default","title","getContent","meta","previousPostDetails","previousPost","previousSlug","length","nextPostDetails","nextPost","nextSlug","route","getData","req","context","previousDetails","href","blogRoot","nextDetails","getView","MDXComponent","other"],"mappings":"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","sourcesContent":["import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.js')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4])\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n"]},"metadata":{},"sourceType":"module"}