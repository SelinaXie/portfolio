{"ast":null,"code":"var _jsxFileName = \"/Users/selinaxie/Documents/AppLab/ss/portfolio/src/components/ArticleMeta.js\";\nimport { join } from 'path';\nimport React from 'react';\nimport { Link } from 'react-navi';\nimport { formatDate } from '../utils/formats';\nimport styles from './ArticleMeta.module.css';\n\nfunction ArticleMeta(_ref) {\n  var blogRoot = _ref.blogRoot,\n      meta = _ref.meta,\n      readingTime = _ref.readingTime;\n  var readingTimeElement;\n\n  if (readingTime) {\n    var minutes = Math.max(Math.round(readingTime.minutes), 1);\n    var cups = Math.round(minutes / 5);\n    readingTimeElement = React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, ' ', \"\\u2022\", ' ', React.createElement(\"span\", {\n      className: styles.readingTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, new Array(cups || 1).fill('☕️').join(''), \" \", minutes, \" min read\"));\n  }\n\n  return React.createElement(\"small\", {\n    className: styles.ArticleMeta,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"time\", {\n    dateTime: meta.date.toUTCString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, formatDate(meta.date)), meta.tags && meta.tags.length && React.createElement(React.Fragment, null, ' ', \"\\u2022\", ' ', React.createElement(\"ul\", {\n    className: styles.tags,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, meta.tags.map(function (tag) {\n    return React.createElement(\"li\", {\n      key: tag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Link, {\n      href: join(blogRoot, 'tags', tag),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, tag));\n  }))), readingTimeElement || null);\n}\n\nexport default ArticleMeta;","map":{"version":3,"sources":["/Users/selinaxie/Documents/AppLab/ss/portfolio/src/components/ArticleMeta.js"],"names":["join","React","Link","formatDate","styles","ArticleMeta","blogRoot","meta","readingTime","readingTimeElement","minutes","Math","max","round","cups","Array","fill","date","toUTCString","tags","length","map","tag"],"mappings":";AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,SAASC,WAAT,OAAsD;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,WAAe,QAAfA,WAAe;AACpD,MAAIC,kBAAJ;;AACA,MAAID,WAAJ,EAAiB;AACf,QAAIE,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWL,WAAW,CAACE,OAAvB,CAAT,EAA0C,CAA1C,CAAd;AACA,QAAII,IAAI,GAAGH,IAAI,CAACE,KAAL,CAAWH,OAAO,GAAG,CAArB,CAAX;AACAD,IAAAA,kBAAkB,GAChB,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,YACc,GADd,EAEE;AAAM,MAAA,SAAS,EAAEL,MAAM,CAACI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,IAAIO,KAAJ,CAAUD,IAAI,IAAI,CAAlB,EAAqBE,IAArB,CAA0B,IAA1B,EAAgChB,IAAhC,CAAqC,EAArC,CADH,OAC8CU,OAD9C,cAFF,CADF;AAOD;;AAED,SACE;AAAO,IAAA,SAAS,EAAEN,MAAM,CAACC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAEE,IAAI,CAACU,IAAL,CAAUC,WAAV,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0Cf,UAAU,CAACI,IAAI,CAACU,IAAN,CAApD,CADF,EAGIV,IAAI,CAACY,IAAL,IACAZ,IAAI,CAACY,IAAL,CAAUC,MADV,IAEA,0CACG,GADH,YACc,GADd,EAEE;AAAI,IAAA,SAAS,EAAEhB,MAAM,CAACe,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,IAAI,CAACY,IAAL,CAAUE,GAAV,CAAc,UAAAC,GAAG;AAAA,WAChB;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEtB,IAAI,CAACM,QAAD,EAAW,MAAX,EAAmBgB,GAAnB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CA,GAA1C,CADF,CADgB;AAAA,GAAjB,CADH,CAFF,CALJ,EAgBGb,kBAAkB,IAAI,IAhBzB,CADF;AAoBD;;AAED,eAAeJ,WAAf","sourcesContent":["import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\nfunction ArticleMeta({ blogRoot, meta, readingTime }) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5);\n    readingTimeElement =\n      <React.Fragment>\n        {' '}&bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n  }\n      \n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {\n        meta.tags &&\n        meta.tags.length &&\n        <>\n          {' '}&bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag =>\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            )}\n          </ul>\n        </>\n      }\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta"]},"metadata":{},"sourceType":"module"}